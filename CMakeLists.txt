cmake_minimum_required(VERSION 2.6)

#
# If the user specifies -DCMAKE_BUILD_TYPE on the command line, take their definition
# and dump it in the cache along with proper documentation, otherwise set CMAKE_BUILD_TYPE
# to Debug prior to calling PROJECT()
#
IF(CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE} CACHE STRING "Choose the type of build, options are: None(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel.")
ELSE(CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE DEBUG CACHE STRING "Choose the type of build, options are: None(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel.")
ENDIF(CMAKE_BUILD_TYPE)

project(Anope CXX)
enable_language(C)

include(CheckFunctionExists)
include(CheckIncludeFile)
include(CheckTypeSize)
include(CheckCXXCompilerFlag)
include(CheckLibraryExists)

if(NOT WIN32)
  option(USE_RUN_CC_PL "Use run-cc.pl for building" OFF)
endif(NOT WIN32)

if(WIN32 AND MSVC)
  set(CXXFLAGS "${CXXFLAGS} /W4 /MD /GR /EHs /D_WIN32 /DMSVCPP /I${Anope_SOURCE_DIR}/include /I${Anope_BINARY_DIR}/include /I${Anope_BINARY_DIR}/lang")
  set(MODULE_CXXFLAGS "${CXXFLAGS} /DMODULE_COMPILE")
else(WIN32 AND MSVC)
  set(CXXFLAGS "${CXXFLAGS} ${CMAKE_CXX_FLAGS} -Wall -Wshadow -I${Anope_SOURCE_DIR}/include -I${Anope_BINARY_DIR}/include -I${Anope_BINARY_DIR}/lang")
  if(UNIX)
    set(CXXFLAGS "${CXXFLAGS} -ansi -pedantic -fno-leading-underscore")
  else(UNIX)
    set(CXXFLAGS "${CXXFLAGS} -D_WIN32")
    if(MINGW)
      set(CXXFLAGS "${CXXFLAGS} -DMINGW")
    endif(MINGW)
  endif(UNIX)
  set(MODULE_CXXFLAGS "${CXXFLAGS}")
endif(WIN32 AND MSVC)
message(STATUS "CMAKE_CXX_CREATE_SHARED_MODULE: ${CMAKE_CXX_CREATE_SHARED_MODULE}")
if(CMAKE_BUILD_TYPE)
  set(CXXFLAGS "${CXXFLAGS} ${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE}}")
endif(CMAKE_BUILD_TYPE)

if(CMAKE_DL_LIBS)
  set(LDFLAGS "${LDFLAGS} ${CMAKE_DL_LIBS}")
endif(CMAKE_DL_LIBS)
if(MINGW)
  set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} ${CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS} -Wl,--enable-auto-import")
endif(MINGW)

#set(MY_COMPILER ${CMAKE_CXX_COMPILER})
#set(MY_COMP_ARG)
if(WIN32)
else(WIN32)
  #set(CMAKE_CXX_LINK_EXECUTABLE "<CMAKE_CXX_COMPILER> ${CXXFLAGS} <CMAKE_CXX_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> ${LDFLAGS}")
  #set(CMAKE_CXX_CREATE_SHARED_MODULE "<CMAKE_CXX_COMPILER> ${CXXFLAGS} <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_CXX_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> ${LDFLAGS}")
endif(WIN32)

if(NOT WIN32)
  check_cxx_compiler_flag(-pipe HAVE_PIPE_FLAG)
  if(HAVE_PIPE_FLAG)
    set(CXXFLAGS "${CXXFLAGS} -pipe")
  endif(HAVE_PIPE_FLAG)

  check_library_exists(nsl inet_ntoa "" HAVE_NSL_LIB)
  if(HAVE_NSL_LIB)
    set(LDFLAGS "${LDFLAGS} -lnsl")
  endif(HAVE_NSL_LIB)
  check_library_exists(socket socket "" HAVE_SOCKET_LIB)
  if(HAVE_SOCKET_LIB)
    set(LDFLAGS "${LDFLAGS} -lsocket")
  endif(HAVE_SOCKET_LIB)
  check_library_exists(resolv res_query "" HAVE_RESOLV_LIB)
  if(HAVE_RESOLV_LIB)
    set(LDFLAGS "${LDFLAGS} -lresolv")
  endif(HAVE_RESOLV_LIB)
  check_library_exists(bsd revoke "" HAVE_BSD_LIB)
  if(HAVE_BSD_LIB)
    set(LDFLAGS "${LDFLAGS} -lbsd")
  endif(HAVE_BSD_LIB)

  try_run(RUN_VA_LIST_AS_ARRAY COMPILE_VA_LIST_AS_ARRAY
    ${Anope_SOURCE_DIR} ${Anope_SOURCE_DIR}/va_list_check.c
  )
  if(COMPILE_VA_LIST_AS_ARRAY AND NOT RUN_VA_LIST_AS_ARRAY)
    set(HAVE_VA_LIST_AS_ARRAY 1)
  endif(COMPILE_VA_LIST_AS_ARRAY AND NOT RUN_VA_LIST_AS_ARRAY)
endif(NOT WIN32)

if(NOT DEFUMASK)
  if(RUNGROUP)
    set(DEFUMASK "007")
  else(RUNGROUP)
    set(DEFUMASK "077")
  endif(RUNGROUP)
endif(NOT DEFUMASK)
check_include_file(sys/types.h HAVE_SYS_TYPES_H)
check_include_file(execinfo.h HAVE_BACKTRACE)
check_function_exists(gethostbyname HAVE_GETHOSTBYNAME)
check_function_exists(gettimeofday HAVE_GETTIMEOFDAY)
check_function_exists(setgrent HAVE_SETGRENT)
check_function_exists(strcasecmp HAVE_STRCASECMP)
check_function_exists(stricmp HAVE_STRICMP)
check_include_file(strings.h HAVE_STRINGS_H)
check_function_exists(strlcat HAVE_STRLCAT)
check_function_exists(strlcpy HAVE_STRLCPY)
check_include_file(sys/select.h HAVE_SYS_SELECT_H)
check_function_exists(umask HAVE_UMASK)
check_type_size(uint8_t UINT8_T)
check_type_size(u_int8_t U_INT8_T)
check_type_size(int16_t INT16_T)
check_type_size(uint16_t UINT16_T)
check_type_size(u_int16_t U_INT16_T)
check_type_size(int32_t INT32_T)
check_type_size(uint32_t UINT32_T)
check_type_size(u_int32_t U_INT32_T)

if(CXXFLAGS)
  string(STRIP ${CXXFLAGS} CXXFLAGS)
endif(CXXFLAGS)
if(LDFLAGS)
  string(STRIP ${LDFLAGS} LDFLAGS)
endif(LDFLAGS)

if(NOT WIN32)
  find_program(GREP grep)
  find_program(SH sh)
  find_program(CHGRP chgrp)
  find_program(CHMOD chmod)
  #message(STATUS "grep: ${GREP}")
  find_program(PERL perl)
  if(PERL)
    if(USE_RUN_CC_PL)
      #set(MY_COMPILER ${Anope_SOURCE_DIR}/run-cc.pl)
      #set(MY_COMP_ARG ${CMAKE_CXX_COMPILER})
      set(CMAKE_CXX_COMPILE_OBJECT "${Anope_SOURCE_DIR}/run-cc.pl ${CMAKE_CXX_COMPILE_OBJECT}")
      set(CMAKE_CXX_LINK_EXECUTABLE "${Anope_SOURCE_DIR}/run-cc.pl ${CMAKE_CXX_LINK_EXECUTABLE}")
      set(CMAKE_CXX_CREATE_SHARED_MODULE "${Anope_SOURCE_DIR}/run-cc.pl ${CMAKE_CXX_CREATE_SHARED_MODULE}")
    endif(USE_RUN_CC_PL)
  endif(PERL)
endif(NOT WIN32)

#set(CMAKE_BUILD_TYPE DEBUG)
#message(STATUS "CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE}: ${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE}}")
#message(STATUS "CMAKE_CXX_COMPILE_OBJECT: ${CMAKE_CXX_COMPILE_OBJECT}")
#set(CMAKE_CXX_COMPILE_OBJECT "${Anope_SOURCE_DIR}/run-cc.pl <CMAKE_CXX_COMPILER> <DEFINES> <FLAGS> -o <OBJECT> -c <SOURCE>")
#message(STATUS "CMAKE_CXX_COMPILE_OBJECT: ${CMAKE_CXX_COMPILE_OBJECT}")
# CMAKE_CXX_COMPILE_OBJECT: <CMAKE_CXX_COMPILER> <DEFINES> <FLAGS> -o <OBJECT> -c <SOURCE>
# CMAKE_CXX_CREATE_SHARED_LIBRARY: <CMAKE_CXX_COMPILER> <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_CXX_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>
# CMAKE_CXX_CREATE_SHARED_MODULE: <CMAKE_CXX_COMPILER> <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_CXX_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>
# CMAKE_CXX_FLAGS_DEBUG: -g
# CMAKE_CXX_FLAGS_RELEASE: -O3 -DNDEBUG
# CMAKE_CXX_LINK_EXECUTABLE: <CMAKE_CXX_COMPILER> <FLAGS> <CMAKE_CXX_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>
# CMAKE_CXX_OUTPUT_EXTENSION: .o
# CMAKE_SHARED_LIBRARY_CXX_FLAGS: -fPIC
# CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS: -shared
# CMAKE_SHARED_LIBRARY_SONAME_CXX_FLAG: -Wl,-soname,

if(NOT BINDIR)
  set(BINDIR "$ENV{HOME}/services")
endif(NOT BINDIR)

if(DATADIR)
  set(SERVICES_DIR "${DATADIR}")
else(DATADIR)
  set(SERVICES_DIR "$ENV{HOME}/services")
  #set(MODULE_PATH "$ENV{HOME}/services/modules/")
  #set(DATADIR "${SERVICES_DIR}")
endif(DATADIR)
if(WIN32)
  set(SERVICES_DIR "${SERVICES_DIR}/data")
endif(WIN32)
if(NOT DATADIR)
  set(DATADIR "${SERVICES_DIR}")
endif(NOT DATADIR)

#set(SERVICES_BINARY "")

add_subdirectory(data)
add_subdirectory(lang)
add_subdirectory(src)
add_subdirectory(include)

#message("[in root] SERVICES_BIN: ${SERVICES_BIN}")

#if(BINDIR)
#  set(SERVICES_BIN "${BINDIR}/${SERVICES_BINARY}")
#else(BINDIR)
#  set(SERVICES_BIN "$ENV{HOME}/services/${SERVICES_BINARY}")
#  set(BINDIR "$ENV{HOME}/services")
#endif(BINDIR)

install(CODE "file(MAKE_DIRECTORY \"${DATADIR}/backups\")")
install(CODE "file(MAKE_DIRECTORY \"${DATADIR}/logs\")")
install(CODE "file(MAKE_DIRECTORY \"${DATADIR}/modules/runtime\")")
if(NOT WIN32)
  if(RUNGROUP)
    install(CODE "execute_process(COMMAND ${CHMOD} 2775 \"${DATADIR}/backups\")")
    install(CODE "execute_process(COMMAND ${CHMOD} 2775 \"${DATADIR}/logs\")")
    install(CODE "execute_process(COMMAND ${CHMOD} 2775 \"${DATADIR}/modules/runtime\")")
    install(CODE "execute_process(COMMAND ${CHGRP} -R ${RUNGROUP} \"${DATADIR}\")")
  endif(RUNGROUP)
endif(NOT WIN32)
