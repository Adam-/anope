#if(${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_BINARY_DIR})
#  set(BUILD_DIR ${CMAKE_CURRENT_BINARY_DIR})
#else(${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_BINARY_DIR})
#  file(RELATIVE_PATH DIR ${Anope_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR})
#  set(BUILD_DIR ${CMAKE_CURRENT_BINARY_DIR}/${DIR})
#endif(${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_BINARY_DIR})

set(SRC_SRCS actions.c base64.c bots.cpp botserv.c channels.c chanserv.c
  commands.c compat.c config.c configreader.cpp datafiles.c encrypt.c events.c
  hashcomp.cpp helpserv.c hostserv.c init.c ircd.c language.c log.c mail.c
  main.c memory.c memoserv.c messages.c misc.c module.cpp modulemanager.cpp
  modules.c news.c nickserv.c operserv.c process.c send.c servers.c sessions.c
  slist.c sockutil.c timeout.c users.c)
list(SORT SRC_SRCS)

set_source_files_properties(${SRC_SRCS} PROPERTIES LANGUAGE CXX COMPILE_FLAGS "${CXXFLAGS}")

#add_custom_target(src_srcs DEPENDS ${SRC_SRCS})

set(actions.c_HEADERS services.h)
set(base64.c_HEADERS services.h)
set(bots.cpp_HEADERS services.h)
set(botserv.c_HEADERS services.h pseudo.h)
set(channels.c_HEADERS services.h ${Anope_BINARY_DIR}/lang/language.h)
set(chanserv.c_HEADERS services.h pseudo.h)
set(commands.c_HEADERS services.h commands.h ${Anope_BINARY_DIR}/lang/language.h)
set(compat.c_HEADERS services.h)
set(config.c_HEADERS services.h configreader.h hashcomp.h)
set(configreader.cpp_HEADERS services.h)
set(datafiles.c_HEADERS services.h datafiles.h)
set(encrypt.c_HEADERS services.h encrypt.h)
set(events.c_HEADERS modules.h ${Anope_BINARY_DIR}/lang/language.h ${Anope_BINARY_DIR}/include/version.h)
set(hashcomp.c_HEADERS hashcomp.h)
set(helpserv.c_HEADERS services.h pseudo.h)
set(hostserv.c_HEADERS services.h pseudo.h)
set(init.c_HEADERS services.h pseudo.h)
set(ircd.c_HEADERS services.h extern.h)
set(language.c_HEADERS services.h ${Anope_BINARY_DIR}/lang/language.h)
set(log.c_HEADERS services.h pseudo.h)
set(mail.c_HEADERS services.h ${Anope_BINARY_DIR}/lang/language.h)
set(main.c_HEADERS services.h timeout.h ${Anope_BINARY_DIR}/include/version.h datafiles.h modules.h)
set(memory.c_HEADERS services.h)
set(memoserv.c_HEADERS services.h pseudo.h)
set(messages.c_HEADERS services.h messages.h ${Anope_BINARY_DIR}/lang/language.h)
set(misc.c_HEADERS services.h ${Anope_BINARY_DIR}/lang/language.h hashcomp.h)
set(module.cpp_HEADERS modules.h ${Anope_BINARY_DIR}/lang/language.h ${Anope_BINARY_DIR}/include/version.h)
set(modulemanager.cpp_HEADERS modules.h ${Anope_BINARY_DIR}/lang/language.h ${Anope_BINARY_DIR}/include/version.h)
set(modules.c_HEADERS modules.h ${Anope_BINARY_DIR}/lang/language.h ${Anope_BINARY_DIR}/include/version.h)
set(news.c_HEADERS services.h pseudo.h)
set(nickserv.c_HEADERS services.h pseudo.h)
set(operserv.c_HEADERS services.h pseudo.h)
set(process.c_HEADERS services.h messages.h modules.h)
set(send.c_HEADERS services.h)
set(servers.c_HEADERS services.h)
set(sessions.c_HEADERS services.h pseudo.h)
set(slist.c_HEADERS services.h slist.h)
set(sockutil.c_HEADERS services.h)
set(timeout.c_HEADERS services.h pseudo.h)
set(users.c_HEADERS services.h)

foreach(SRC ${SRC_SRCS})
  #string(REGEX REPLACE "\\." "_" SRC_TARGET ${SRC})
  #string(REGEX REPLACE "\\.cpp$" ".x" SRC_X ${SRC})
  #string(REGEX REPLACE "\\.c$" ".o" SRC_O ${SRC_X})
  #string(REGEX REPLACE "\\.x$" ".o" OBJ ${SRC_O})
  #string(REGEX REPLACE "\\." "_" OBJ_TARGET ${OBJ})
  #set(SRC_SRCS_FULL ${SRC_SRCS_FULL} ${CMAKE_CURRENT_SOURCE_DIR}/${SRC})
  #set(SRC_OBJS ${SRC_OBJS} ${BUILD_DIR}/${OBJ})
  #add_custom_command(OUTPUT ${BUILD_DIR}/${OBJ}
  #  COMMAND ${MY_COMPILER} ${MY_COMP_ARG} ${CMAKE_CXX_CFLAGS} -I${Anope_SOURCE_DIR}/include -c ${SRC} -o ${BUILD_DIR}/${OBJ}
  #  MAIN_DEPENDENCY ${SRC}
  #)
  #add_custom_target(src_${OBJ_TARGET} DEPENDS ${BUILD_DIR}/${OBJ})
  #add_custom_target(src_${SRC_TARGET} DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${SRC})
  #add_dependencies(src_srcs src_${SRC_TARGET})
  set(HEADERS)
  if(${SRC}_HEADERS)
    foreach(HEADER ${${SRC}_HEADERS})
      string(SUBSTRING ${HEADER} 0 1 FIRST_CHAR)
      string(SUBSTRING ${HEADER} 1 1 SECOND_CHAR)
      if(FIRST_CHAR STREQUAL "/" OR SECOND_CHAR STREQUAL ":")
        set(HEADERS ${HEADERS} ${HEADER})
      else(FIRST_CHAR STREQUAL "/" OR SECOND_CHAR STREQUAL ":")
        set(HEADERS ${HEADERS} ${Anope_SOURCE_DIR}/include/${HEADER})
      endif(FIRST_CHAR STREQUAL "/" OR SECOND_CHAR STREQUAL ":")
    endforeach(HEADER)
  endif(${SRC}_HEADERS)
  if(HEADERS)
    set_source_files_properties(${SRC} PROPERTIES OBJECT_DEPENDS "${HEADERS}")
  endif(HEADERS)
endforeach(SRC)

#add_custom_target(src_srcs DEPENDS ${SRC_SRCS_FULL})

#add_custom_command(OUTPUT ${BUILD_DIR}/services
#  COMMAND ${MY_COMPILER} ${MY_COMP_ARG} ${CMAKE_CXX_CFLAGS} ${SRC_OBJS} -o ${BUILD_DIR}/services
#  DEPENDS ${SRC_OBJS}
#)
#add_custom_target(src_services ALL DEPENDS ${BUILD_DIR}/services)
#add_custom_target(src_services DEPENDS ${BUILD_DIR}/services)
#add_custom_target(build ALL)
#add_dependencies(build language headers src_services)
add_executable(services ${SRC_SRCS})
set_target_properties(services PROPERTIES LINK_FLAGS "${LDFLAGS}")
  set_target_properties(services PROPERTIES ENABLE_EXPORTS ON)
if(WIN32)
  target_link_libraries(services wsock32)
endif(WIN32)
#set_target_properties(services PROPERTIES COMPILE_FLAGS ${CXXFLAGS})
add_dependencies(services language headers)

get_target_property(SERVICES_BINARY services LOCATION)
file(RELATIVE_PATH SERVICES_BINARY ${CMAKE_CURRENT_BINARY_DIR} ${SERVICES_BINARY})
  set(SERVICES_BIN "${BINDIR}/${SERVICES_BINARY}")
message("[in src] SERVICES_BIN: ${SERVICES_BIN}")

configure_file(${Anope_SOURCE_DIR}/include/sysconf.h.cmake ${Anope_BINARY_DIR}/include/sysconf.h)
if(NOT WIN32)
  configure_file(${Anope_SOURCE_DIR}/src/bin/anoperc.cmake ${Anope_BINARY_DIR}/src/bin/anoperc)
endif(NOT WIN32)

add_subdirectory(bin)
add_subdirectory(core)
add_subdirectory(modules)
add_subdirectory(protocol)
add_subdirectory(tools)

install(TARGETS services
  DESTINATION "${BINDIR}"
)
